{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MissingValue","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"BdLzXQEL7BSX","colab_type":"code","colab":{}},"source":["#library\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import random as rnd\n","from sklearn import svm, tree, linear_model, neighbors, naive_bayes, ensemble, discriminant_analysis, gaussian_process\n","from xgboost import XGBClassifier\n","from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n","from sklearn import feature_selection\n","from sklearn import model_selection\n","from sklearn import metrics\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","import matplotlib.pylab as pylab\n","import seaborn as sns\n","from pandas.plotting import scatter_matrix\n","from sklearn import svm, tree, linear_model, neighbors, naive_bayes, ensemble, discriminant_analysis, gaussian_process\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n","from sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier, GradientBoostingClassifier, BaggingClassifier, ExtraTreesClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.svm import SVC, LinearSVC\n","from xgboost import XGBClassifier\n","from lightgbm import LGBMClassifier\n","from sklearn import model_selection\n","from sklearn.pipeline import make_pipeline, make_union\n","from sklearn.experimental import enable_iterative_imputer\n","from sklearn.impute import SimpleImputer, IterativeImputer, MissingIndicator\n","from sklearn.metrics import confusion_matrix, classification_report, make_scorer\n","from sklearn.metrics import accuracy_score, recall_score, precision_recall_curve\n","from sklearn.model_selection import StratifiedKFold, cross_validate\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.pipeline import Pipeline\n","from sklearn.calibration import CalibratedClassifierCV\n","from hyperopt import fmin, tpe, hp, STATUS_OK, Trials\n","# from tpot import TPOTClassifier\n","from sklearn.model_selection import KFold, ShuffleSplit, StratifiedKFold\n","import warnings\n","from sklearn.preprocessing import MinMaxScaler\n","# import plotly.express as px\n","import itertools\n","import pandas as pd\n","import numpy as np\n","\n","from sklearn.compose import ColumnTransformer\n","from sklearn.pipeline import Pipeline\n","from sklearn.impute import SimpleImputer\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split, GridSearchCV"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zQC_Jx-78bM9","colab_type":"code","colab":{}},"source":["import pandas as pd\n","data = pd.read_csv(\"https://raw.githubusercontent.com/Mineria/Titanic/master/csv/train.csv\")\n","\n","# Drop Ticket & Cabin \n","data = data.drop(['Ticket', 'Cabin'], axis=1)\n","\n","# Get the title from name\n","data['Title'] = data.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n","data['Title'] = data['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n"," \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n","data['Title'] = data['Title'].replace('Mlle', 'Miss')\n","data['Title'] = data['Title'].replace('Ms', 'Miss')\n","data['Title'] = data['Title'].replace('Mme', 'Mrs')\n","\n","title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5} \n","data['Title'] = data['Title'].map(title_mapping)\n","data = data.drop(['Name', 'PassengerId'], axis=1)\n","\n","#Change Sex to Numeric\n","data['Sex'] = data['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n","\n","#Add Family Size \n","data['FamilySize'] = data['SibSp'] + data['Parch'] + 1\n","data['IsAlone'] = 0\n","data.loc[data['FamilySize'] == 1, 'IsAlone'] = 1\n","data = data.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\n","\n","# Categorizing Numerical Value \n","# data['FareBand'] = pd.qcut(data['Fare'], 4).astype(str)\n","# data['AgeBand'] = pd.qcut(data['Age'], 4).astype(str)\n","# data = data.drop(['Fare', 'Age'], axis=1)\n","Target = ['Survived']\n","\n","X = data[data.columns.difference(['Survived'])]\n","y = data[Target]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ehjYxc4AoSPE","colab_type":"code","colab":{}},"source":["from sklearn.base import BaseEstimator, TransformerMixin\n","\n","# Create a class to select numerical or categorical columns \n","class OldDataFrameSelector(BaseEstimator, TransformerMixin):\n","    def __init__(self, attribute_names):\n","        self.attribute_names = attribute_names\n","    def fit(self, X, y=None):\n","        return self\n","    def transform(self, X):\n","        return X[self.attribute_names].values"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hlKXdMido8Vl","colab_type":"code","colab":{}},"source":["num_pipeline = Pipeline([\n","        ('selector', OldDataFrameSelector(numeric_features)),\n","        ('imputer_num', eachImputer_num),\n","        ('std_scaler', StandardScaler()),\n","    ])\n","\n","    cat_pipeline = Pipeline([\n","            ('selector', OldDataFrameSelector(categorical_features)),\n","            ('imputer_cat', eachImputer_cat),\n","            ('cat_encoder', OneHotEncoder(sparse=False)),\n","        ])\n","    full_pipeline = FeatureUnion(transformer_list=[\n","        (\"num_pipeline\", num_pipeline),\n","        (\"cat_pipeline\", cat_pipeline),\n","    ])\n","    data_chan = full_pipeline.fit_transform(X)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nsmiOFHtpA4O","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"outputId":"fbab4b3b-13bd-426c-a43d-039b1ce0c212","executionInfo":{"status":"ok","timestamp":1567069836967,"user_tz":-330,"elapsed":1065,"user":{"displayName":"Lavi Nigam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBwG1VibMXTWbQ0ZQyb23IiuNGTb9GjO0tTjn2-ZA=s64","userId":"01031927567449846531"}}},"source":["OldDataFrameSelector(categorical_features)"],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["OldDataFrameSelector(attribute_names=['Embarked', 'IsAlone', 'Pclass', 'Sex',\n","                                      'Title'])"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"dj3GEbn6pEhK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"0c78d72f-463c-4794-fb81-e9b87cfc036f","executionInfo":{"status":"ok","timestamp":1567069851998,"user_tz":-330,"elapsed":1094,"user":{"displayName":"Lavi Nigam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBwG1VibMXTWbQ0ZQyb23IiuNGTb9GjO0tTjn2-ZA=s64","userId":"01031927567449846531"}}},"source":["OldDataFrameSelector(numeric_features)"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["OldDataFrameSelector(attribute_names=['Age', 'Fare'])"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"uVmo55xFpMQO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":307},"outputId":"56794ae7-e0a4-4de7-9d1c-e97a4b25ba0a","executionInfo":{"status":"error","timestamp":1567069887232,"user_tz":-330,"elapsed":1089,"user":{"displayName":"Lavi Nigam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBwG1VibMXTWbQ0ZQyb23IiuNGTb9GjO0tTjn2-ZA=s64","userId":"01031927567449846531"}}},"source":["  data_chan = full_pipeline.fit(X)"],"execution_count":36,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-36-d82a2c49b980>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata_chan\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfull_pipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/pipeline.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    885\u001b[0m             \u001b[0mThis\u001b[0m \u001b[0mestimator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    886\u001b[0m         \"\"\"\n\u001b[0;32m--> 887\u001b[0;31m         \u001b[0mtransformers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parallel_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_fit_one\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    888\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mtransformers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    889\u001b[0m             \u001b[0;31m# All transformers are None\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/pipeline.py\u001b[0m in \u001b[0;36m_parallel_func\u001b[0;34m(self, X, y, fit_params, func)\u001b[0m\n\u001b[1;32m    940\u001b[0m             \u001b[0mmessage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_log_message\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0midx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtransformers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    941\u001b[0m             \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransformer\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 942\u001b[0;31m                                     weight) in enumerate(transformers, 1))\n\u001b[0m\u001b[1;32m    943\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    944\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m    919\u001b[0m             \u001b[0;31m# remaining jobs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    920\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 921\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    922\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    923\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    757\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    758\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 759\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    760\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    761\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    714\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    715\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 716\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    717\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    718\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    180\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 182\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    183\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    547\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    548\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 549\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    550\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    551\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    223\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 225\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    226\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    223\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 225\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    226\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/pipeline.py\u001b[0m in \u001b[0;36m_fit_one\u001b[0;34m(transformer, X, y, weight, message_clsname, message, **fit_params)\u001b[0m\n\u001b[1;32m    734\u001b[0m     \"\"\"\n\u001b[1;32m    735\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0m_print_elapsed_time\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage_clsname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 736\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mtransformer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    737\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    738\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/pipeline.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    350\u001b[0m             \u001b[0mThis\u001b[0m \u001b[0mestimator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    351\u001b[0m         \"\"\"\n\u001b[0;32m--> 352\u001b[0;31m         \u001b[0mXt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfit_params\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    353\u001b[0m         with _print_elapsed_time('Pipeline',\n\u001b[1;32m    354\u001b[0m                                  self._log_message(len(self.steps) - 1)):\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/pipeline.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    315\u001b[0m                 \u001b[0mmessage_clsname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Pipeline'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    316\u001b[0m                 \u001b[0mmessage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_log_message\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep_idx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 317\u001b[0;31m                 **fit_params_steps[name])\n\u001b[0m\u001b[1;32m    318\u001b[0m             \u001b[0;31m# Replace the transformer of the step with the fitted\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    319\u001b[0m             \u001b[0;31m# transformer. This is necessary when loading the transformer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/memory.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    353\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    354\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 355\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    356\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    357\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcall_and_shelve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/pipeline.py\u001b[0m in \u001b[0;36m_fit_transform_one\u001b[0;34m(transformer, X, y, weight, message_clsname, message, **fit_params)\u001b[0m\n\u001b[1;32m    714\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0m_print_elapsed_time\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage_clsname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    715\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtransformer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'fit_transform'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 716\u001b[0;31m             \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtransformer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    717\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    718\u001b[0m             \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtransformer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mfit_transform\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    551\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m             \u001b[0;31m# fit method of arity 1 (unsupervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 553\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    554\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    555\u001b[0m             \u001b[0;31m# fit method of arity 2 (supervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/impute/_base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    230\u001b[0m         \u001b[0mself\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0mSimpleImputer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    231\u001b[0m         \"\"\"\n\u001b[0;32m--> 232\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    233\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    234\u001b[0m         \u001b[0;31m# default fill_value is 0 for numerical input and \"missing_value\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/impute/_base.py\u001b[0m in \u001b[0;36m_validate_input\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    204\u001b[0m                                  \"\".format(self.strategy, X.dtype.kind))\n\u001b[1;32m    205\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 206\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mve\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    207\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    208\u001b[0m         \u001b[0m_check_inputs_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmissing_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/impute/_base.py\u001b[0m in \u001b[0;36m_validate_input\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    197\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    198\u001b[0m             X = check_array(X, accept_sparse='csc', dtype=dtype,\n\u001b[0;32m--> 199\u001b[0;31m                             force_all_finite=force_all_finite, copy=self.copy)\n\u001b[0m\u001b[1;32m    200\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mve\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    201\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;34m\"could not convert\"\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mve\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, warn_on_dtype, estimator)\u001b[0m\n\u001b[1;32m    540\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mforce_all_finite\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    541\u001b[0m             _assert_all_finite(array,\n\u001b[0;32m--> 542\u001b[0;31m                                allow_nan=force_all_finite == 'allow-nan')\n\u001b[0m\u001b[1;32m    543\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    544\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mensure_min_samples\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_assert_all_finite\u001b[0;34m(X, allow_nan)\u001b[0m\n\u001b[1;32m     54\u001b[0m                 not allow_nan and not np.isfinite(X).all()):\n\u001b[1;32m     55\u001b[0m             \u001b[0mtype_err\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'infinity'\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mallow_nan\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m'NaN, infinity'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 56\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg_err\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtype_err\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     57\u001b[0m     \u001b[0;31m# for object dtype data, we only check for NaNs (GH-13254)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'object'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mallow_nan\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Input contains NaN, infinity or a value too large for dtype('float64')."]}]},{"cell_type":"code","metadata":{"id":"zMMHZbONxT0J","colab_type":"code","outputId":"9fe57061-9ceb-45a9-94fe-9d905e3c0df5","executionInfo":{"status":"error","timestamp":1567071049370,"user_tz":-330,"elapsed":1077,"user":{"displayName":"Lavi Nigam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBwG1VibMXTWbQ0ZQyb23IiuNGTb9GjO0tTjn2-ZA=s64","userId":"01031927567449846531"}},"colab":{"base_uri":"https://localhost:8080/","height":368}},"source":["from sklearn.preprocessing import PolynomialFeatures\n","from sklearn.decomposition import PCA\n","from sklearn.feature_selection import SelectKBest, VarianceThreshold\n","from sklearn.pipeline import Pipeline, FeatureUnion\n","\n","\n","imputation_num = [\n","                  (SimpleImputer(add_indicator=False, copy=True, fill_value=None,\n","        missing_values=None, strategy='mean', verbose=0)),\n","       ( SimpleImputer(add_indicator=False, copy=True, fill_value=None,\n","        missing_values=None, strategy='median', verbose=0))\n","             ]\n","\n","imputation_cat = [\n","                  (SimpleImputer(add_indicator=False, copy=True, fill_value=None,\n","        missing_values=None, strategy='most_frequent', verbose=0))\n","             ]\n","\n","feature_processing = [\n","                      \n","                      (PCA(n_components=5)),\n","                      (PolynomialFeatures(2))\n","                      ]\n","\n","feature_selection = [\n","                     (SelectKBest(k=5,score_func=\"f1\")),\n","                     (VarianceThreshold(threshold=(.8 * (1 - .8))))\n","                     ]\n","\n","models = [\n","          AdaBoostClassifier(),\n","          BaggingClassifier(),\n","          ExtraTreesClassifier(),\n","         GradientBoostingClassifier(),\n","]\n","\n","class MissingValueHelper():\n","  def  __init__(self):\n","    \n","    None\n","  \n","  def getNumCatColumns(self, X):\n","    categorical_features = X.select_dtypes(include=['category','int','O']).columns.tolist() # consider as category \n","    numeric_features = X.select_dtypes(include=['float']).columns.tolist()\n","    return numeric_features,categorical_features\n","\n","  def getColumnTransformer(self,numeric_features,categorical_features,eachImputer_num,eachImputer_cat):\n","    numeric_transformer = Pipeline(steps=[\n","            ('imputer', eachImputer_num),\n","            ('scaler', StandardScaler())])\n","    categorical_transformer = Pipeline(steps=[\n","            ('imputer', eachImputer_cat),\n","            ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n","    return FeatureUnion(\n","            transformers=[\n","                ('num', numeric_transformer, numeric_features),\n","                ('cat', categorical_transformer, categorical_features)])\n","    \n","\n","\n","# Loop 1 for imputation\n","for index_i, eachImputer_num in enumerate(imputation_num):\n","  object_m = MissingValueHelper()\n","  numeric_features,categorical_features = object_m.getNumCatColumns(X)\n","  print (categorical_features,numeric_features)\n","  name_imputer_num = str(index_i)+'_'+'imputer_num'\n","  for index_c, eachImputer_cat in enumerate(imputation_cat):\n","    name_imputer_cat = str(index_i)+'_'+'imputer_cat'\n","    \n","    preprocess = object_m.getColumnTransformer(numeric_features,categorical_features,eachImputer_num,eachImputer_cat)\n","    print (preprocess)\n","    # preprocess.fit_transform(X)\n","  # print (eachImputer)\n","  # loop 2 for feature pre-processing\n","    for index_f, eachfeatureprocess in enumerate(feature_processing):\n","      name_featurepre = str(index_i)+'_'+'featurepre'\n","      # print(eachfeatureprocess)\n","      #loop 3 for best feature selection \n","      for index_s, eachfeatureselection in enumerate(feature_selection):\n","        name_selection = str(index_i)+'_'+'fselection'\n","        # print(eachfeatureselection)\n","        # (name_imputer_cat, ColumnTransformer),\n","        combined_features = FeatureUnion([(str(name_featurepre),eachfeatureprocess),(str(name_selection),eachfeatureselection)])\n","        # pipeline = Pipeline([(\"imputer_output\",full_pipeline), (\"feature\",combined_features)])\n","        # print (combined_features)\n","        # X_features = pipeline.fit_transform(X)\n","        # X_features = combined_features.fit(data_chan, y).transform(X)\n","        # loop 4 model\n","        for index_m, model in enumerate(models):\n","          # (\"features\", combined_features)\n","          # pipeline = Pipeline(steps=[(\"imputation\", preprocess), (\"model_\"+str(index_m), model)]) \n","          # print(pipeline)\n","          # model.fit(X_New,y)\n","          # print (accuracy_score(pipeline.predict(X),y))\n","          None"],"execution_count":62,"outputs":[{"output_type":"stream","text":["['Embarked', 'IsAlone', 'Pclass', 'Sex', 'Title'] ['Age', 'Fare']\n"],"name":"stdout"},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-62-e04d6e3056e3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     68\u001b[0m     \u001b[0mname_imputer_cat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex_i\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'_'\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'imputer_cat'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m     \u001b[0mpreprocess\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobject_m\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetColumnTransformer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnumeric_features\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcategorical_features\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0meachImputer_num\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0meachImputer_cat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m     \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mpreprocess\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m     \u001b[0;31m# preprocess.fit_transform(X)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-62-e04d6e3056e3>\u001b[0m in \u001b[0;36mgetColumnTransformer\u001b[0;34m(self, numeric_features, categorical_features, eachImputer_num, eachImputer_cat)\u001b[0m\n\u001b[1;32m     55\u001b[0m             transformers=[\n\u001b[1;32m     56\u001b[0m                 \u001b[0;34m(\u001b[0m\u001b[0;34m'num'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumeric_transformer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumeric_features\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m                 ('cat', categorical_transformer, categorical_features)])\n\u001b[0m\u001b[1;32m     58\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: __init__() got an unexpected keyword argument 'transformers'"]}]},{"cell_type":"code","metadata":{"id":"NNP4e85ls7BN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":612},"outputId":"63166507-c119-4052-f4cb-0a81282dfc92","executionInfo":{"status":"ok","timestamp":1567070905382,"user_tz":-330,"elapsed":893,"user":{"displayName":"Lavi Nigam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBwG1VibMXTWbQ0ZQyb23IiuNGTb9GjO0tTjn2-ZA=s64","userId":"01031927567449846531"}}},"source":["preprocess"],"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ColumnTransformer(n_jobs=None, remainder='drop', sparse_threshold=0.3,\n","                  transformer_weights=None,\n","                  transformers=[('num',\n","                                 Pipeline(memory=None,\n","                                          steps=[('imputer',\n","                                                  SimpleImputer(add_indicator=False,\n","                                                                copy=True,\n","                                                                fill_value=None,\n","                                                                missing_values=None,\n","                                                                strategy='median',\n","                                                                verbose=0)),\n","                                                 ('scaler',\n","                                                  StandardScaler(copy=True,\n","                                                                 with_mean=True,\n","                                                                 with_std=True))],\n","                                          verbose=False),\n","                                 ['Age...\n","                                                  SimpleImputer(add_indicator=False,\n","                                                                copy=True,\n","                                                                fill_value=None,\n","                                                                missing_values=None,\n","                                                                strategy='most_frequent',\n","                                                                verbose=0)),\n","                                                 ('onehot',\n","                                                  OneHotEncoder(categorical_features=None,\n","                                                                categories=None,\n","                                                                drop=None,\n","                                                                dtype=<class 'numpy.float64'>,\n","                                                                handle_unknown='ignore',\n","                                                                n_values=None,\n","                                                                sparse=True))],\n","                                          verbose=False),\n","                                 ['Embarked', 'IsAlone', 'Pclass', 'Sex',\n","                                  'Title'])],\n","                  verbose=False)"]},"metadata":{"tags":[]},"execution_count":59}]},{"cell_type":"code","metadata":{"id":"psr36K-WXE5B","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":136},"outputId":"e852423b-38c6-4c17-bb2e-904015a020f7","executionInfo":{"status":"ok","timestamp":1567065135259,"user_tz":-330,"elapsed":1094,"user":{"displayName":"Lavi Nigam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBwG1VibMXTWbQ0ZQyb23IiuNGTb9GjO0tTjn2-ZA=s64","userId":"01031927567449846531"}}},"source":["X.values"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[22.0, 'S', 7.25, ..., 3, 0, 1],\n","       [38.0, 'C', 71.2833, ..., 1, 1, 3],\n","       [26.0, 'S', 7.925, ..., 3, 1, 2],\n","       ...,\n","       [nan, 'S', 23.45, ..., 3, 1, 2],\n","       [26.0, 'C', 30.0, ..., 1, 0, 1],\n","       [32.0, 'Q', 7.75, ..., 3, 0, 1]], dtype=object)"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"FjoDzhjxBkp1","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"p4ShJb46Bwrh","colab_type":"code","colab":{}},"source":["object_m = MissingValueHelper()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"akLci5x8LPBY","colab_type":"code","outputId":"3ef5c227-586d-4e6e-a9b3-094c5200c5f1","executionInfo":{"status":"ok","timestamp":1566827153186,"user_tz":-330,"elapsed":1046,"user":{"displayName":"Lavi Nigam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBwG1VibMXTWbQ0ZQyb23IiuNGTb9GjO0tTjn2-ZA=s64","userId":"01031927567449846531"}},"colab":{"base_uri":"https://localhost:8080/","height":221}},"source":["X.info()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 7 columns):\n","Age         714 non-null float64\n","Embarked    889 non-null object\n","Fare        891 non-null float64\n","IsAlone     891 non-null int64\n","Pclass      891 non-null int64\n","Sex         891 non-null int64\n","Title       891 non-null int64\n","dtypes: float64(2), int64(4), object(1)\n","memory usage: 48.8+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FE0wKV-cUL3q","colab_type":"code","colab":{}},"source":["numeric_features,categorical_features = object_m.getNumCatColumns(X)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2qfGBjxiUYEj","colab_type":"code","colab":{}},"source":["preprocess = object_m.getColumnTransformer(numeric_features,categorical_features)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CK-oehjZppqY","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":238},"outputId":"94e36920-0671-4242-a8e4-40365bd9dcea","executionInfo":{"status":"ok","timestamp":1567070039703,"user_tz":-330,"elapsed":1089,"user":{"displayName":"Lavi Nigam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBwG1VibMXTWbQ0ZQyb23IiuNGTb9GjO0tTjn2-ZA=s64","userId":"01031927567449846531"}}},"source":["preprocess.fit_transform(X)"],"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.56573646, -0.50244517,  0.        , ...,  0.        ,\n","         0.        ,  0.        ],\n","       [ 0.66386103,  0.78684529,  1.        , ...,  1.        ,\n","         0.        ,  0.        ],\n","       [-0.25833709, -0.48885426,  0.        , ...,  0.        ,\n","         0.        ,  0.        ],\n","       ...,\n","       [-0.1046374 , -0.17626324,  0.        , ...,  0.        ,\n","         0.        ,  0.        ],\n","       [-0.25833709, -0.04438104,  1.        , ...,  0.        ,\n","         0.        ,  0.        ],\n","       [ 0.20276197, -0.49237783,  0.        , ...,  0.        ,\n","         0.        ,  0.        ]])"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"hz1LDWif999t","colab_type":"code","colab":{}},"source":["clf = Pipeline(steps=[('preprocessor',preprocess),\n","                      ('classifier', LogisticRegression(solver='lbfgs'))])\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GobPRHSRZy-v","colab_type":"code","colab":{}},"source":["from sklearn.metrics import f1_score"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_o1GZwIWRzx1","colab_type":"code","outputId":"b81374e0-5005-459d-e41c-b3797c5dad89","executionInfo":{"status":"ok","timestamp":1566831004216,"user_tz":-330,"elapsed":1116,"user":{"displayName":"Lavi Nigam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBwG1VibMXTWbQ0ZQyb23IiuNGTb9GjO0tTjn2-ZA=s64","userId":"01031927567449846531"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["clf.fit(X_train, y_train)\n","print(\"model score: %.3f\" % f1_score(clf.predict(X_test), y_test))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["model score: 0.741\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"92Qo3zoB197L","colab_type":"code","colab":{}},"source":["\n","# Drop Ticket & Cabin \n","data = data.drop(['Ticket', 'Cabin'], axis=1)\n","\n","# Get the title from name\n","data['Title'] = data.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n","data['Title'] = data['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n"," \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n","data['Title'] = data['Title'].replace('Mlle', 'Miss')\n","data['Title'] = data['Title'].replace('Ms', 'Miss')\n","data['Title'] = data['Title'].replace('Mme', 'Mrs')\n","\n","title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5} \n","data['Title'] = data['Title'].map(title_mapping)\n","data = data.drop(['Name', 'PassengerId'], axis=1)\n","\n","#Change Sex to Numeric\n","data['Sex'] = data['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n","\n","#Add Family Size \n","data['FamilySize'] = data['SibSp'] + data['Parch'] + 1\n","data['IsAlone'] = 0\n","data.loc[data['FamilySize'] == 1, 'IsAlone'] = 1\n","data = data.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\n","\n","#Imputing Missing Value \n","data['Age'].fillna(data['Age'].dropna().median(), inplace=True)\n","data['Embarked'].fillna(data['Embarked'].dropna().mode()[0], inplace=True)\n","\n","# Categorizing Numerical Value \n","# data['FareBand'] = pd.qcut(data['Fare'], 4).astype(str)\n","# data['AgeBand'] = pd.qcut(data['Age'], 4).astype(str)\n","# data = data.drop(['Fare', 'Age'], axis=1)\n","\n","# Converting Embark to Number\n","data['Embarked'] = data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n","\n","# \n","\n","# data['FareBand'] = data['FareBand'].map( {'(-0.001, 7.91]': 0, '(31.0, 512.329]': 3, '(7.91, 14.454]': 1, '(14.454, 31.0]':2 } ).astype(int)\n","# data['AgeBand'] = data['AgeBand'].map( {'(0.419, 22.0]': 0, '(35.0, 80.0]': 3, '(22.0, 28.0]': 1, '(28.0, 35.0]':2 } ).astype(int)\n","\n","# Change in the cateogry Type & Data Columns to make it dummy\n","dataDump  = data.copy()\n","df = dataDump.drop(['Survived','Age','Fare'], axis=1)\n","# df2 = df.drop([],axis = 1)\n","df3 = pd.DataFrame()\n","for col in df.columns:\n","    df3[col] = df[col].astype('category')\n","\n","Target = ['Survived']\n","data1_x_bin = pd.concat([pd.get_dummies(df3), data[['Age','Fare']]],axis=1)\n","\n","X = data1_x_bin\n","y = data[Target]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qO3ToNMVzjJp","colab_type":"code","colab":{}},"source":["model = [AdaBoostClassifier(),\n","    BaggingClassifier(),\n","    ExtraTreesClassifier(),\n","    GradientBoostingClassifier(),\n","    ]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"voFvp1M927SF","colab_type":"code","colab":{}},"source":["grid_model = {\n","    \n","    'LogisticRegression':LogisticRegression(),\n","    'DecisionTreeClassifier': DecisionTreeClassifier(),\n","    'RandomForestClassifier': RandomForestClassifier(),\n","    'KNeighborsClassifier': KNeighborsClassifier(),\n","    # 'SVC': SVC(),\n","    'ExtraTreesClassifier': ExtraTreesClassifier(),\n","    'AdaBoostClassifier': AdaBoostClassifier(),\n","    'GradientBoostingClassifier': GradientBoostingClassifier()\n","    \n","}\n","\n","grid_param = {\n","    'LogisticRegression': { \"C\":np.logspace(-3,3,7), \"penalty\":[\"l1\",\"l2\"] }, \n","    'DecisionTreeClassifier': {'criterion' : ['gini', 'entropy'], 'splitter' : ['random', 'best'], 'max_depth':[2,5,10], 'min_samples_leaf':[2,5,10]},\n","    'RandomForestClassifier': { 'n_estimators': [16, 32] },\n","    'ExtraTreesClassifier': { 'n_estimators': [16, 32] },\n","    'KNeighborsClassifier':{ 'n_neighbors': [5,10,15,20], 'algorithm' : ['auto', 'ball_tree', 'kd_tree', 'brute']},\n","    'AdaBoostClassifier':  { 'n_estimators': [16, 32] },\n","    'GradientBoostingClassifier': { 'n_estimators': [16, 32], 'learning_rate': [0.8, 1.0] },\n","    # 'SVC': [\n","    #     {'kernel': ['linear'], 'C': [1, 10]},\n","    #     {'kernel': ['rbf'], 'C': [1, 10], 'gamma': [0.001, 0.0001]},\n","    # ]\n","}"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iuZB1zi30Kay","colab_type":"code","colab":{}},"source":["def runModelinParallel(model):\n","  warnings.filterwarnings('ignore')\n","  m = model_selection.GridSearchCV(model,grid_param[model.__class__.__name__],verbose=1,cv=10,scoring=\"f1\",return_train_score=True)\n","  m.fit(X,y)\n","  print(m.best_estimator_)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"M7rLNwIm1sME","colab_type":"code","outputId":"850f2633-c075-40af-f8be-b839e2e809ca","executionInfo":{"status":"ok","timestamp":1566906694092,"user_tz":-330,"elapsed":17350,"user":{"displayName":"Lavi Nigam","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mBwG1VibMXTWbQ0ZQyb23IiuNGTb9GjO0tTjn2-ZA=s64","userId":"01031927567449846531"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["import multiprocessing as mp\n","pool = mp.Pool(processes=mp.cpu_count())\n","import warnings\n","\n","%time pool.map(runModelinParallel, [model for model_name,model in grid_model.items()])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Fitting 10 folds for each of 14 candidates, totalling 140 fits\n","Fitting 10 folds for each of 36 candidates, totalling 360 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done 140 out of 140 | elapsed:    3.6s finished\n"],"name":"stderr"},{"output_type":"stream","text":["LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n","                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n","                   multi_class='warn', n_jobs=None, penalty='l2',\n","                   random_state=None, solver='warn', tol=0.0001, verbose=0,\n","                   warm_start=False)\n","Fitting 10 folds for each of 2 candidates, totalling 20 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done  20 out of  20 | elapsed:    1.2s finished\n"],"name":"stderr"},{"output_type":"stream","text":["RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n","                       max_depth=None, max_features='auto', max_leaf_nodes=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=16,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)\n","Fitting 10 folds for each of 16 candidates, totalling 160 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done 360 out of 360 | elapsed:    5.5s finished\n"],"name":"stderr"},{"output_type":"stream","text":["DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=10,\n","                       max_features=None, max_leaf_nodes=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=10, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, presort=False,\n","                       random_state=None, splitter='best')\n","Fitting 10 folds for each of 2 candidates, totalling 20 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done  20 out of  20 | elapsed:    1.2s finished\n"],"name":"stderr"},{"output_type":"stream","text":["ExtraTreesClassifier(bootstrap=False, class_weight=None, criterion='gini',\n","                     max_depth=None, max_features='auto', max_leaf_nodes=None,\n","                     min_impurity_decrease=0.0, min_impurity_split=None,\n","                     min_samples_leaf=1, min_samples_split=2,\n","                     min_weight_fraction_leaf=0.0, n_estimators=16, n_jobs=None,\n","                     oob_score=False, random_state=None, verbose=0,\n","                     warm_start=False)\n","Fitting 10 folds for each of 2 candidates, totalling 20 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done  20 out of  20 | elapsed:    1.3s finished\n"],"name":"stderr"},{"output_type":"stream","text":["AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None, learning_rate=1.0,\n","                   n_estimators=32, random_state=None)\n","Fitting 10 folds for each of 4 candidates, totalling 40 fits\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n","[Parallel(n_jobs=1)]: Done  40 out of  40 | elapsed:    1.8s finished\n"],"name":"stderr"},{"output_type":"stream","text":["GradientBoostingClassifier(criterion='friedman_mse', init=None,\n","                           learning_rate=0.8, loss='deviance', max_depth=3,\n","                           max_features=None, max_leaf_nodes=None,\n","                           min_impurity_decrease=0.0, min_impurity_split=None,\n","                           min_samples_leaf=1, min_samples_split=2,\n","                           min_weight_fraction_leaf=0.0, n_estimators=16,\n","                           n_iter_no_change=None, presort='auto',\n","                           random_state=None, subsample=1.0, tol=0.0001,\n","                           validation_fraction=0.1, verbose=0,\n","                           warm_start=False)\n"],"name":"stdout"},{"output_type":"stream","text":["[Parallel(n_jobs=1)]: Done 160 out of 160 | elapsed:    8.9s finished\n"],"name":"stderr"},{"output_type":"stream","text":["KNeighborsClassifier(algorithm='brute', leaf_size=30, metric='minkowski',\n","                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n","                     weights='uniform')\n","CPU times: user 56.1 ms, sys: 51.5 ms, total: 108 ms\n","Wall time: 13.8 s\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[None, None, None, None, None, None, None]"]},"metadata":{"tags":[]},"execution_count":49}]}]}